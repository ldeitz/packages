:py:mod:`forthebirds.forthebirds`
=================================

.. py:module:: forthebirds.forthebirds


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   forthebirds.forthebirds.eBirdTripPlanner




.. py:class:: eBirdTripPlanner(token, state_name='', country_name='')

   This class uses the eBird API region endpoints to find recent, notable, and specific species observations for locations
   around the world. Using the eBird API requires obtaining a token, which anyone with an eBird account can do at
   https://ebird.org/api/keygen.

   :param token: Token that can be obtained at https://ebird.org/api/keygen
   :type token: String
   :param state: Full name of desired state to explore
   :type state: String, default null
   :param country: Full name of desired country to explore
   :type country: String, default null

   :returns: * *Class object*
             * *Examples*
             * *>>> from forthebirds import eBirdTripPlanner*
             * *>>> eBirdTripPlanner(token='abc123', state_name='New York', country_name='United States')*

   .. py:method:: _ebird_api_call(self, url, params={})

      Helper function to call eBird API endpoints.

      :param url: The endpoint url of interest
      :type url: String
      :param params = Dict: Dictionary of parameters for endpoint of interest
      :param default null: Dictionary of parameters for endpoint of interest

      :returns:
      :rtype: The JSON output of the API call

      .. rubric:: Example

      >>> birdplanner = eBirdTripPlanner(token='abc123', state_name='New York', country_name='United States')
      >>> birdplanner._ebird_api_call(url='https://api.ebird.org/v2/ref/region/list/country/world')
      [{'code': 'AF', 'name': 'Afghanistan'},
       {'code': 'AL', 'name': 'Albania'},
       {'code': 'DZ', 'name': 'Algeria'},
       {'code': 'AS', 'name': 'American Samoa'},
       ...]


   .. py:method:: _find_region_code(region_to_find, region_list, region_type)
      :staticmethod:

      Helper function to find one region name from a given list of region names. Used for endpoints that require
      region codes that are not intuitive for a user.

      :param region_to_find: The name of the region of interest
      :type region_to_find: String
      :param region_list: The list of dictionaries containing region name and region code, found through an endpoint
      :type region_list: List
      :param region_type: The type of region to search for. Used in an error message if the region is not found. The region types supported
                          are 'substate', 'state', and 'country'
      :type region_type: String

      :returns: The region code
      :rtype: String

      .. rubric:: Examples

      >>> birdplanner = eBirdTripPlanner(token='abc123', state_name='New York', country_name='United States')
      >>> birdplanner._find_region_code('New York', list_of_state_codes, 'state')
      US-NY

      The code of the region (New York State).

      >>> birdplanner._find_region_code('Kings', list_of_ny_counties, 'substate')
      US-NY-047

      The code of the region (Kings County, New York)


   .. py:method:: _get_bird_id_info(bird_abbr)
      :staticmethod:

      Helper function to scrape identification information from the eBird website.

      :param bird_abbr: The eBird abbreviation of the species of interest
      :type bird_abbr: String

      :returns: A short paragraph with some information on habitat, size, shape, color pattern, and/or behavior of the species
                of interest
      :rtype: String

      .. rubric:: Example

      >>> birdplanner = eBirdTripPlanner(token='abc123', state_name='New York', country_name='United States')
      >>> birdplanner._get_bird_id_info('amewoo')
      'Plump, well-camouflaged shorebird that favors wooded or shrubby areas, usually near open fields. Plain
      buffy-salmon belly distinctive; also note intricately patterned upperparts with broad gray stripes down the back.
      Goofy-looking expression with huge dark eye placed high and far back on head. Extremely long bill used to probe the
      ground for worms. When flushed from dense cover, listen for high-pitched wing twittering and note rotund shape and
      long bill. Might be confused with Wilson’s Snipe, but woodcock is not nearly as dark and patterned. Fairly common
      throughout eastern North America, but secretive and rarely seen well in daytime. Always on the ground, except during
      well-known elaborate courtship display performed from dusk to dawn in spring. Listen for loud nasal “PEENT!” calls
      from the ground and high-pitched chirps and twitters (produced by the outer wing feathers) from high in the sky.'

      The identifying information for the American Woodcock ('amewoo').


   .. py:method:: find_country_code(self, find_all=True)

      Function to find the code of the country given when the class was instantiated or to view all supported country
      names. Default is to view all supported country names.

      :param find_all: If True, will return a list of country names
      :type find_all: Boolean, default True

      :returns:
      :rtype: String of one specified country code or List of all supported country names

      .. rubric:: Examples

      >>> birdplanner = eBirdTripPlanner(token='abc123', state_name='New York', country_name='United States')
      >>> birdplanner.find_country_code()
      ['Afghanistan',
       'Albania',
       'Algeria',
       'American Samoa',
       ...]

      A list of supported country names.

      >>> birdplanner.find_country_code(find_all=False)
      'US'

      The country code given for the United States, the country given when the class was instantiated.


   .. py:method:: find_state_code(self, find_all=True)

      Function to find the code of the state given when the class was instantiated or to view all supported state names.
      Default is to view all supported state names.

      :param find_all: If True, will return a list of state names within the country used when class was instantiated.
      :type find_all: Boolean, default True

      :returns:
      :rtype: String of one specified state code or List of all supported state names

      .. rubric:: Examples

      >>> birdplanner = eBirdTripPlanner(token='abc123', state_name='New York', country_name='United States')
      >>> birdplanner.find_state_code()
      ['Alabama',
       'Alaska',
       'Arizona',
       'Arkansas',
       'California',
       ...]

      A list of supported state names.

      >>> birdplanner.find_substate_code(find_all=False)
      US-NY

      The region code of New York State in the United States, both given when the class was instantiated.


   .. py:method:: find_substate_code(self, substate_name='', find_all=True)

      Function to find the code of a given substate (in the United States, the county) from the state input when the class
      was instantiated or to view all supported substate (county) names. Default is to view all supported substate names.

      :param substate_name: The name of the substate or county of interest. This defaults to null to support the find_all function.
      :type substate_name: String, default null
      :param find_all: If True, will return a list of county names within the state used when class was instantiated.
      :type find_all: Boolean, default True

      :returns:
      :rtype: String of one specified substate code or List of all supported substate names

      .. rubric:: Examples

      >>> birdplanner = eBirdTripPlanner(token='abc123', state_name='New York', country_name='United States')
      >>> birdplanner.find_substate_code()
      ['Albany',
       'Allegany',
       'Bronx',
       'Broome',
       'Cattaraugus',
       'Cayuga',
       ...]

      A list of supported substate (county) names.

      >>> birdplanner.find_substate_code(substate='Kings',find_all=False)
      US-NY-047

      The region code of Kings County in New York State in the United States, the latter two given when the class was
      instantiated.


   .. py:method:: get_regional_hotspots(self, substate_name='', region_type='state', json=False)

      Function to list the birding hotspots at either substate or state level, and can return in either a user-friendly
      dataframe or a json dictionary. The state-level search will return hotspots for the state name given when the class
      was instantiated.

      :param substate_name: The name of the substate or county of interest. This defaults to null to support state-level searches.
      :type substate_name: String, default null
      :param region_type: The level of region at which to search for hotspots. Must be indicator of 'state' or 'substate'. Defaults to
                          'state'.
      :type region_type: String, default 'substate'
      :param json: Indicates whether or not to return results in JSON or DataFrame.
      :type json: Boolean, default False

      :returns:
      :rtype: DataFrame or JSON of all hotspots within the given region

      .. rubric:: Examples

      >>> birdplanner = eBirdTripPlanner(token='abc123', state_name='New York', country_name='United States')
      >>> birdplanner.get_regional_hotspots(json=True)
      A JSON dictionary of all hotspots within New York State.

      >>> birdplanner.get_regional_hotspots('Kings', region_type='substate')
      A DataFrame of all hotspots within Kings County in New York State.


   .. py:method:: find_hotspot_code(self, hotspot_name, substate_name='', region_type='state')

      Function to find the region code of a given birding hotspot within the state input at class instantiation, or within
      a substate if hotspot names are non-unique.

      :param hotspot_name: The name of the hotspot of interest
      :type hotspot_name: String
      :param substate_name: The name of the substate or county of interest. This defaults to null to support state-level searches.
      :type substate_name: String, default null
      :param region_type: The level of region at which to search for the hotspot name. Must be indicator of 'state' or 'substate'.
                          Defaults to 'state'.
      :type region_type: String, default 'state'

      :returns: Location code of the hotspot in question
      :rtype: String

      .. rubric:: Example

      >>> birdplanner = eBirdTripPlanner(token='abc123', state_name='New York', country_name='United States')
      >>> birdplanner.find_hotspot_code(hotspot_name='Prospect Park')
      L109516

      The location code of Prospect Park, a birding hotspot, in New York.


   .. py:method:: recent_region_observations(self, hotspot_name='', substate_name='', region_type='state', idinfo=False, days_back=14, locations=[], only_hotspots=False, json=False)

      Function to find recent bird observations within a region. The user can look at a hotspot, substate, state, or
      country level. This function can also return identification information for each bird record. Default is to return
      observations at the state level.

      :param hotspot_name: The name of a birding hotspot. This defaults to null to support state-level searches.
      :type hotspot_name: String, default null
      :param substate_name: The name of a substate or county of interest. This defaults to null to support state-level searches.
      :type substate_name: String, default null
      :param region_type: The level of region at which to search for the hotspot name. Must be indicator of 'substate', 'state', or
                          'country'. Defaults to 'state'.
      :type region_type: String, default null
      :param idinfo: Flag to indicate whether the function should return bird identification information with each record. This
                     scrapes eBird.org. Default is False because it significantly slows down the function.
      :type idinfo: Boolean, default False
      :param days_back: The number of days to look back for observations. The limit of the API for recent observations is 30 days.
                        Default is set to 14 because that is the API default.
      :type days_back: Int, default 14
      :param locations: A list of up to 10 location IDs (hotspot, substate, state, or country) to pull recent observations from.
      :type locations: List, default null
      :param only_hotspots: Flag to indicate whether to only return bird observations from hotspot locations.
      :type only_hotspots: Boolean, default False
      :param json: Flag to indicate whether to return results in JSON or DataFrame.
      :type json: Boolean, default False

      :returns:
      :rtype: DataFrame or JSON of recent bird observations within a geography

      .. rubric:: Examples

      >>> birdplanner = eBirdTripPlanner(token='abc123', state_name='New York', country_name='United States')
      >>> birdplanner.recent_region_observations()
      DataFrame of observations within the last 14 days in New York State.

      >>> birdplanner.recent_region_observations(hotspot_name='Prospect Park', idinfo=True, days_back=30, json=True)
      JSON of observations within the last 30 days in Prospect Park (New York), with bird ID info for each record.


   .. py:method:: recent_rare_region_observations(self, hotspot_name='', substate_name='', region_type='state', idinfo=False, days_back=14, locations=[], only_hotspots=False)

      Function to find rare and recent bird observations within a region. The user can look at a hotspot, substate, state,
      or country level. This function can also return identification information for each bird record. Default is to return
      observations at the state level.

      :param hotspot_name: The name of a birding hotspot. This defaults to null to support state-level searches.
      :type hotspot_name: String, default null
      :param substate_name: The name of a substate or county of interest. This defaults to null to support state-level searches.
      :type substate_name: String, default null
      :param region_type: The level of region at which to search for the hotspot name. Must be indicator of 'substate', 'state', or
                          'country'. Defaults to 'state'.
      :type region_type: String, default null
      :param idinfo: Flag to indicate whether the function should return bird identification information with each record. This
                     scrapes eBird.org. Default is False because it significantly slows down the function.
      :type idinfo: Boolean, default False
      :param days_back: The number of days to look back for observations. The limit of the API for recent observations is 30 days.
                        Default is set to 14 because that is the API default.
      :type days_back: Int, default 14
      :param locations: A list of up to 10 location IDs (hotspot, substate, state, or country) to pull recent observations from.
      :type locations: List, default null
      :param only_hotspots: Flag to indicate whether to only return bird observations from hotspot locations.
      :type only_hotspots: Boolean, default False

      :returns:
      :rtype: DataFrame of recent rare bird observations within a geography

      .. rubric:: Examples

      >>> birdplanner = eBirdTripPlanner(token='abc123', state_name='New York', country_name='United States')
      >>> birdplanner.recent_rare_region_observations()
      DataFrame of rare observations within the last 14 days in New York State.

      >>> birdplanner.recent_rare_region_observations(hotspot_name='Prospect Park', idinfo=True, days_back=30)
      DataFrame of rare observations within the last 30 days in Prospect Park (New York), with bird ID info for each
      record.


   .. py:method:: recent_species_observations_by_location(self, bird_name, hotspot_name='', substate_name='', region_type='state', idinfo=False, days_back=14, locations=[], only_hotspots=False)

      Function to find recent observations of a specific species within a region. The user can look at a hotspot, substate,
      state, or country level. This function can also return identification information for each bird record. Default is to
      return observations at the state level.

      :param hotspot_name: The name of a birding hotspot. This defaults to null to support state-level searches.
      :type hotspot_name: String, default null
      :param substate_name: The name of a substate or county of interest. This defaults to null to support state-level searches.
      :type substate_name: String, default null
      :param region_type: The level of region at which to search for the hotspot name. Must be indicator of 'substate', 'state', or
                          'country'. Defaults to 'state'.
      :type region_type: String, default null
      :param idinfo: Flag to indicate whether the function should return bird identification information with each record. This
                     scrapes eBird.org. Default is False because it significantly slows down the function.
      :type idinfo: Boolean, default False
      :param days_back: The number of days to look back for observations. The limit of the API for recent observations is 30 days.
                        Default is set to 14 because that is the API default.
      :type days_back: Int, default 14
      :param locations: A list of up to 10 location IDs (hotspot, substate, state, or country) to pull recent observations from.
      :type locations: List, default null
      :param only_hotspots: Flag to indicate whether to only return bird observations from hotspot locations.
      :type only_hotspots: Boolean, default False

      :returns:
      :rtype: DataFrame of recent specific species observations within a geography

      .. rubric:: Examples

      >>> birdplanner = eBirdTripPlanner(token='abc123', state_name='New York', country_name='United States')
      >>> birdplanner.recent_rare_region_observations()
      DataFrame of rare observations within the last 14 days in New York State.

      >>> birdplanner.recent_rare_region_observations(hotspot_name='Prospect Park', idinfo=True, days_back=30)
      DataFrame of rare observations within the last 30 days in Prospect Park (New York), with bird ID info for each
      record.



